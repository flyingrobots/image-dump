name: Optimize Images

on:
  push:
    paths:
      - 'original/**'
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  optimize:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull LFS files
        run: git lfs pull
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build optimization image
        run: docker compose build optimize
      
      - name: Run optimization
        id: run-optimization
        run: |
          set -e
          OUTPUT=$(docker compose run --rm optimize-lfs 2>&1) || EXIT_CODE=$?
          echo "$OUTPUT"
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if [ "${EXIT_CODE:-0}" -ne 0 ]; then
            echo "::error::Image optimization failed with exit code ${EXIT_CODE}"
            exit ${EXIT_CODE}
          fi
      
      - name: Check for changes
        id: verify-changed-files
        run: |
          git add optimized/
          if git diff --staged --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push optimized images
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add optimized/
          
          # Create commit message with status
          COMMIT_MSG="üñºÔ∏è Optimize images from commit ${{ github.sha }}"
          if grep -q "‚ùå Error" <<< "${{ steps.run-optimization.outputs.output }}"; then
            ERROR_COUNT=$(echo "${{ steps.run-optimization.outputs.output }}" | grep -c "‚ùå Error" || true)
            COMMIT_MSG="$COMMIT_MSG (‚ö†Ô∏è ${ERROR_COUNT} errors)"
          fi
          COMMIT_MSG="$COMMIT_MSG [skip ci]"
          
          git commit -m "$COMMIT_MSG"
          git push
      
      - name: Create job summary
        if: always()
        run: |
          echo "## Image Optimization Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract key information from optimization output
          if grep -q "‚úÖ Optimization complete!" <<< "${{ steps.run-optimization.outputs.output }}"; then
            echo "### üìä Optimization Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.run-optimization.outputs.output }}" | grep -A20 "Optimization complete!" >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for errors
          if grep -q "‚ùå Error" <<< "${{ steps.run-optimization.outputs.output }}"; then
            echo "### ‚ö†Ô∏è Errors Encountered" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.run-optimization.outputs.output }}" | grep "‚ùå Error" >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
            echo "### ‚úÖ Images were optimized and committed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changed files:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 HEAD -- optimized/ | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ÑπÔ∏è No images needed optimization" >> $GITHUB_STEP_SUMMARY
          fi