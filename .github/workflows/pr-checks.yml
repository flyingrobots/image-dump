name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-coverage:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm test -- --coverage --coverageReporters=json-summary --coverageReporters=text
    
    - name: Coverage Report
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
          const total = coverage.total;
          
          const formatPercent = (num) => `${num.toFixed(1)}%`;
          
          const comment = `## ðŸ“Š Test Coverage Report
          
          | Metric | Coverage |
          |--------|----------|
          | Statements | ${formatPercent(total.statements.pct)} |
          | Branches | ${formatPercent(total.branches.pct)} |
          | Functions | ${formatPercent(total.functions.pct)} |
          | Lines | ${formatPercent(total.lines.pct)} |
          
          âœ… All tests passed!`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lint-check:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for console.log statements
      run: |
        if grep -r "console\.log" scripts/ --exclude="*.test.js" --exclude-dir=node_modules; then
          echo "::error::Found console.log statements in production code"
          exit 1
        fi
    
    - name: Check for focused tests
      run: |
        if grep -r "\.only\|\.skip" tests/; then
          echo "::error::Found .only or .skip in tests"
          exit 1
        fi

  docker-build:
    name: Docker Build Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build all services
      run: docker compose build

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'dependencies')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Check package-lock changes
      run: |
        echo "## ðŸ“¦ Dependency Changes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        git diff origin/${{ github.base_ref }}...HEAD -- package-lock.json | grep -E "^\+" | grep -E "version|resolved" | head -20 >> $GITHUB_STEP_SUMMARY || echo "No significant changes" >> $GITHUB_STEP_SUMMARY

  required-checks:
    name: All PR Checks
    runs-on: ubuntu-latest
    needs: [test-coverage, lint-check, docker-build]
    if: always()
    
    steps:
    - name: Check results
      run: |
        if [[ "${{ needs.test-coverage.result }}" != "success" || 
              "${{ needs.lint-check.result }}" != "success" || 
              "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "::error::One or more required checks failed"
          exit 1
        fi
        echo "âœ… All checks passed!"